
- name: check if ecc-cli executable is present
  shell: "which /usr/local/bin/ecc-cli"
  register: ecc_bin
  ignore_errors: true

- name: install ecc
  pip:
    executable: pip
    name: git+https://github.com/neuro-sysmed/ecc.git
    extra_args: --prefix=/usr/local 
  when: ecc_bin.rc != 0

- name: check if ssh-key exists
  become: true
  become_user: "{{ecc_user}}"
  stat:
    path: $HOME/.ssh/id_rsa
  register: ssh_key

- name: create ssh key for connecting to nodes
  become: true
  become_user: "{{ecc_user}}"
  command: ssh-keygen -t rsa -f $HOME/.ssh/id_rsa -q -P ""
  when: ssh_key.stat.exists == false

- name: fetch created public ssh key
  become: true
  become_user: "{{ecc_user}}"
  shell: cat ~/.ssh/id_rsa.pub
  register: ssh_pub_key_cat

- name: store pub-key to be used later
  set_fact:
    ssh_key: "{{ssh_pub_key_cat.stdout}}"

- name: ensure "{{cluster_root}}etc dir exists
  file:
    path: "{{cluster_root}}etc/"
    state: directory
    group: "{{ecc_user}}"
    mode: 0775
 

- name: Deploy ecc utv config file, will keep local copy if exists!
  become: true
  become_user: "{{ecc_user}}"
  template:
    src: templates/ecc/ecc_utv.yaml.j2
    dest: "{{cluster_root}}/etc/ecc_utv.yaml"
    owner: "{{ecc_user}}"

- name: Deploy ecc prod config file, will keep local copy if exists!
  become: true
  become_user: "{{ecc_user}}"
  template:
    src: templates/ecc/ecc_preprod.yaml.j2
    dest: "{{cluster_root}}/etc/ecc_preprod.yaml"
    owner: "{{ecc_user}}"


- name: add ecc_conf to /etc/environment
  become_user: root
  lineinfile:
    dest: "/etc/environment"
    state: present
    regexp: "^ECC_CONF="
    line: "ECC_CONF={{cluster_root}}/etc/ecc.yaml"

- name: check if {{ infrastructure_playbook_root }} exists
  stat:
    path: "{{ infrastructure_playbook_root }}"
  register: playbook_install

- name: install infrastructure-playbook in {{ infrastructure_playbook_root }}
  git:
    repo: https://github.com/neuro-sysmed/infrastructure-playbook.git
    dest: "{{ infrastructure_playbook_root }}"
  when: playbook_install.stat.exists == false
  
- name: check if venv in {{ infrastructure_playbook_root }} exists
  stat:
    path: "{{ infrastructure_playbook_root }}/venv"
  register: playbook_venv

- name: create venv in {{ infrastructure_playbook_root }}
  command:
    chdir: "{{ infrastructure_playbook_root }}"
    cmd: python3.8 -m venv venv
    creates: "{{ infrastructure_playbook_root }}/venv"
  when: playbook_venv.stat.exists == false

    
- name: Install pip  for infrastructure-playbook
  pip:
    name: wheel
    virtualenv: "{{  infrastructure_playbook_root }}/venv"
  when: playbook_venv.stat.exists == false


- name: Install specified python requirements for infrastructure-playbook
  pip:
    requirements: "{{  infrastructure_playbook_root }}/requirements.txt"
    virtualenv: "{{  infrastructure_playbook_root }}/venv"
  when: playbook_venv.stat.exists == false


- name: Install infrastructure-playbook ansible roles
  command:
    chdir: "{{  infrastructure_playbook_root }}"
    cmd: ./venv/bin/ansible-galaxy role install -p roles -r requirements.yml


- name: Install infrastructure-playbook ansible collections
  command:
    chdir: "{{  infrastructure_playbook_root }}"
    cmd: ./venv/bin/ansible-galaxy collection install -p roles -r requirements.yml


- name: Copy vault_password file 
  copy:
    src: vault_password
    dest: "{{  infrastructure_playbook_root }}/vault_password"
    owner: "{{ecc_user}}"
    mode: '0644'
